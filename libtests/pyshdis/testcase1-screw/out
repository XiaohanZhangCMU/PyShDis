4a5,6
> from numpy.ctypeslib import ndpointer
> import matplotlib.pyplot as plt
6a9
> from TF import *
8,9d10
< 
< from numpy.ctypeslib import ndpointer
12c13,18
< from display import paradis_draw
---
> '''
> Todo:
> 
>   ../../../thinfilm/AllSegmentStress.c
> '''
> 
15c21,22
< global useGPU, useX11
---
> 
> global useGPU
17d23
< useX11 = "noX11" #"X11" 
19,21d24
< if useGPU:
<   from numba import vectorize, cuda
<   
25c28
<   global shearModulus, nu
---
>   global shearModulus, pois
36c39
<   ParadisLibraryPath = workdir+"/../../../lib/libparadisimp.so."+useX11
---
>   ParadisLibraryPath = workdir+"/../../../lib/libparadisimp.so"
44a48
>   global tf, paradis_TF_Init
51a56
>   tf   = POINTER(ThinFilm_t)()
53d57
<   #ParadisInit()
56a61,66
>   print " paradis init finish in python"
> 
>   paradis_TF_Init = paradislib.TF_Init
>   paradis_TF_Init.argtypes = [ POINTER(Home_t),  POINTER(POINTER(ThinFilm_t))] 
>   paradis_TF_Init(home, byref(tf))
>   print " paradis TF_Init finish in python"
58d67
<   #AllSegmentStress()
60c69
<   paradisAllSegmentStress.argtypes = [ POINTER(Home_t), ctypes.c_double, ctypes.c_double, ctypes.c_double,ndpointer(ctypes.c_double, flags="C_CONTIGUOUS") ]
---
>   paradisAllSegmentStress.argtypes = [ POINTER(Home_t), POINTER(ThinFilm_t), ctypes.c_double, ctypes.c_double, ctypes.c_double,ndpointer(ctypes.c_double, flags="C_CONTIGUOUS") ]
63d71
<   #GetNumPysicNodes
67c75
< #
---
> 
69,73c77,79
<   '''
<   paradisGetNodeList.argtypes = [ POINTER(Home_t), POINTER(ctypes.c_double),  POINTER(ctypes.c_double), POINTER(ctypes.c_double)] 
<   
<   '''
<   paradisGetNodeList.argtypes = [ POINTER(Home_t), POINTER(ctypes.c_double)]
---
> #  paradisGetNodeList.argtypes = [ POINTER(Home_t),  POINTER(ThinFilm_t), ndpointer(ctypes.c_double, flags="C_CONTIGUOUS"), ndpointer(ctypes.c_double, flags="C_CONTIGUOUS"), ndpointer(ctypes.c_double, flags="C_CONTIGUOUS") ] 
> 
>   paradisGetNodeList.argtypes = [ POINTER(Home_t),  POINTER(ThinFilm_t), POINTER(ctypes.c_double),  POINTER(ctypes.c_double), POINTER(ctypes.c_double)] 
77c83,84
<   paradis_SH_calc_stress.argtypes = [ POINTER(Home_t), ndpointer(ctypes.c_double, flags="C_CONTIGUOUS")] 
---
> #  paradis_SH_calc_stress.argtypes = [ POINTER(Home_t),  POINTER(ThinFilm_t), ndpointer(ctypes.c_double,ndim =3)] 
>   paradis_SH_calc_stress.argtypes = [ POINTER(Home_t),  POINTER(ThinFilm_t), ndpointer(ctypes.c_double, flags="C_CONTIGUOUS")] 
86,87c93,94
<   paradisstep.argtypes = [ POINTER(Home_t)] 
<   #paradisstep(home)
---
>   paradisstep.argtypes = [ POINTER(Home_t),  POINTER(ThinFilm_t)] 
>   paradisstep(home,tf)
94d100
<   print " Pyshdis init finished."
103a110
>   maxstep = 2
105d111
<   maxstep = 1
107,109c113,115
<   nu = 0.333333
<   a = 1
<   b = 1 # 2.7412e-10
---
>   nu = 1.0/3.0
>   a = 3
>   b = 1
112,117d117
<   xmin= -20000
<   xmax=20000
< 
<   XX,YY,ZZ = void_mesh(Ngrid, mu, nu, a, b, t)
< 
<   #assert(home.contents.param.contents.fmEnabled == 1)
121c121
<     #t0 = time.time()  
---
>     t0 = time.time()  
123a124
>     paradisstep(home, tf)
128a130,139
>     XX,YY,ZZ = void_mesh(Ngrid, mu, nu, a, b, t)
>     sigma_inf = np.zeros(XX.shape+(3, 3))
>     
>     mm = -mu*b/2.0/np.pi * YY[1,1]/((XX[1,1]-t)**2+YY[1,1]**2)
> 
>     sigma_inf[:, :, 0, 2] = -mu*b/2.0/np.pi * YY/((XX-t)**2+YY**2)
>     sigma_inf[:, :, 2, 0] = -mu*b/2.0/np.pi * YY/((XX-t)**2+YY**2)
>     sigma_inf[:, :, 1, 2] =  mu*b/2.0/np.pi * (XX-t)/((XX-t)**2+YY**2)
>     sigma_inf[:, :, 2, 1] =  mu*b/2.0/np.pi * (XX-t)/((XX-t)**2+YY**2)
> 
130d140
< #    print "I am sleeping 1 s"
132d141
<     #@vectorize(['float32 (float32, float32)'], target = 'cuda')
133a143,145
>       x = XX[i]
>       y = YY[i]
>       z = ZZ[i]
135,136c147,148
<       paradisAllSegmentStress(home, XX[i], YY[i], ZZ[i], stress)
<       tot_stress[i] = -stress
---
>       paradisAllSegmentStress(home, tf, x, y, z, stress)
>       tot_stress[i] = stress
142d153
<     '''
143a155,156
>     print 'nnodes = ', nnodes
> 
147,153c160,161
<     paradisGetNodeList(home, X.ctypes.data_as(POINTER(c_double)), Y.ctypes.data_as(POINTER(c_double)), Z.ctypes.data_as(POINTER(c_double)))
< #    print "I am sleeping 1.3 s"
<     '''
<     nnodes = paradisGetNumPhysicNodes(home)
<     XYZ = np.zeros((nnodes*3))
<     paradisGetNodeList(home, XYZ.ctypes.data_as(POINTER(c_double)))
<     #print XYZ[2::3]
---
>     paradisGetNodeList(home, tf,X.ctypes.data_as(POINTER(c_double)), Y.ctypes.data_as(POINTER(c_double)), Z.ctypes.data_as(POINTER(c_double)))
>     #time.sleep(100)
160,168c168,170
<     ptwz_sigma_eval = stress_soln_void_dislocation(Ngrid, mu,nu,a,b,t,XX, YY, ZZ, XYZ[::3],XYZ[1::3],XYZ[2::3],tot_stress)
< #    print "I am sleeping 2 s"
< 
<     #ptwz_sigma_eval = np.zeros(X.shape+(3,3))
<     #stress = np.zeros((3,3))
<     #stress[0,1] = 0
<     #stress[1,0] = 0
<     #for i in np.ndindex(X.shape):
<     #  ptwz_sigma_eval[i] = stress
---
> #    XX,YY,ZZ = void_mesh(Ngrid, mu, nu, a, b, t)
>     ptwz_sigma_eval = stress_soln_void_dislocation(Ngrid, mu,nu,a,b,t,XX, YY, ZZ, X,Y,Z,tot_stress)
>    # ptwz_sigma_eval = stress_soln_void_dislocation(Ngrid, mu,nu,a,b,t,XX, YY, ZZ, X,Y,Z,sigma_inf)
176,177c178,179
<     #ptwz_sigma_eval = np.real(ptwz_sigma_eval)
<     #ptwz_sigma_eval.astype(ctypes.c_double)
---
>     ptwz_sigma_eval = np.real(ptwz_sigma_eval)
>     ptwz_sigma_eval.astype(ctypes.c_double)
179,191c181,190
<     #nelem = 1;
<     #for i in range(len(ptwz_sigma_eval.shape)):
<     #  nelem *= ptwz_sigma_eval.shape[i]
< 
<     sig_array = np.array(np.reshape(ptwz_sigma_eval,(ptwz_sigma_eval.size,1)), order='C')
<     #print sig_array
<     paradis_SH_calc_stress(home, sig_array)
<     #np.save('sigma_eval.npy', sig_array)
<     #t1 = time.time()
< 
<     paradisstep(home)
<     #paradis_draw(Ngrid, a, xmin, xmax, X, Y, Z)
< #    print "I am sleeping 3 s"
---
>     nelem = 1;
>     for i in range(len(ptwz_sigma_eval.shape)):
>       nelem *= ptwz_sigma_eval.shape[i]
> 
>     sig_array = np.array(np.reshape(ptwz_sigma_eval,(nelem,1)), order='C')
> 
>     paradis_SH_calc_stress(home, tf, sig_array)
>     np.save('sigma_eval.npy', sig_array)
>     t1 = time.time()
>     time.sleep(10)
